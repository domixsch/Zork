package ch.bbw.zork;import java.util.*;public class Game {	private Player player;	private Parser parser;	private Room currentRoom;	private Room outside, laboratory, patient_room, balcony, operation_room;	private Item needle, fire_extinguisher, cable, metal_bar, crowbar, pillow, fist;	private Enemy zombie, fat_zombie, nurse, doctor;	private static final Random random = new Random();	public Game() {		parser = new Parser(System.in);		needle = new Item("Needle", "A sharp needle", 5.0, 10, 0.1, null, 0);		fist = new Item("Fist", "Your own fist", 1.0, 100, 0.5, null, 0);		outside = new Room("outside the ruined Hospital", 0);		laboratory = new Room("laboratory, a room where research is done to patients", 1);		patient_room = new Room("patient room... it gives you chills", 2);		balcony = new Room("the balcony. you can see the city in ruins", 3);		operation_room = new Room("Last room in this floor... ", 4);		outside.setExits(null, laboratory, balcony, patient_room);		laboratory.setExits(null, null, null, outside);		patient_room.setExits(null, outside, null, null);		balcony.setExits(outside, operation_room, null, null);		operation_room.setExits(null, null, null, balcony);		currentRoom = outside; // start game outside		// Create the player's inventory with some starting items		Item[] startingInventory = {fist, needle};		player = new Player(100, "PlayerName", currentRoom.getRoomId(), currentRoom.getRoomId(), startingInventory);	}	public void play() {		printWelcome();		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();        switch (commandWord) {            case "help":                printHelp();                break;            case "say":                System.out.println(command.getSecondWord());                break;            case "get":                generateRandomItem();                break;            case "go":                goRoom(command);                break;            case "inv":                printInventory();                break;			case "map":				printMap();				break;            case "quit":                if (command.hasSecondWord()) {                    System.out.println("Quit what?");                } else {                    return true; // signal that we want to quit                }                break;        }		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at the abandoned Hospital, Colorado.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());		System.out.println("Good luck, soldier");	}	private void printInventory() {		// Access the inventory through the player instance		List<Item> playerInventory = List.of(player.getInventory());		if (playerInventory != null && !playerInventory.isEmpty()) {			System.out.println("You look through your inventory.");			System.out.println("Inside you have:");			for (Item item : playerInventory) {				System.out.println(item.getName());			}		} else {			System.out.println("Your inventory is empty.");		}	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();			// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);			if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				if (currentRoom.shortDescription() == "outside G block on Peninsula campus") {					System.out.println("Das Fenster ist offen, brrrrrrr");				}				System.out.println(currentRoom.longDescription());			}		}	}	public void printMap(){		System.out.println("+--------------+        +--------------+        +--------------+");		System.out.println("|              |        |              |        |              |");		System.out.println("|   Outside    |--------| Waiting room |--------|    Balcony   |");		System.out.println("|              |        |              |        |              |");		System.out.println("+--------------+        +--------------+        +--------------+");		System.out.println("                               |");		System.out.println("                               |");		System.out.println("+--------------+        +--------------+");		System.out.println("|              |        |              |");		System.out.println("|  Laboratory  |--------|     Hall     |");		System.out.println("|              |        |              |");		System.out.println("+--------------+        +--------------+");		System.out.println("       |                       |");		System.out.println("       |                       |");		System.out.println("+--------------+        +--------------+");		System.out.println("|              |        |              |");		System.out.println("|Operation room|        | Patient room |");		System.out.println("|              |        |              |");		System.out.println("+--------------+        +--------------+");	}	public void generateRandomItem() {		String[] itemNames = {"Needle", "Scalpel", "Syringe", "Stethoscope", "Tweezers", "Forceps", "Medical Hammer", "Blood Pressure Cuff", "Thermometer"};		String name = itemNames[random.nextInt(itemNames.length)];		String description = "Description of " + name;		double damage = random.nextDouble() * 10; // Adjust the damage range as needed		int durability = random.nextInt(10) + 1;		double weight = random.nextDouble() * 2; // Adjust the weight range as needed		String[] perks = null;		int hp = random.nextInt(10) + 1;		// Create a new Item object		Item randomItem = new Item(name, description, damage, durability, weight, perks, hp);		// Add the Item object directly to the player's inventory		player.addToInventory(randomItem);		System.out.println("You found a " + name + "!");	}	public static void main(String[] args) {		Game game = new Game();		game.play();	}}