package ch.bbw.zork;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.Stack;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {	private Player player;	private Parser parser;	private Room currentRoom;	private Room outside, laboratory, patient_room, balcony, operation_room;	private Item needle, fire_extinguisher, cable, metal_bar, crowbar, pillow, fist;	private Enemy zombie, fat_zombie, nurse, doctor;	public Game() {		int currentRoomId = currentRoom.getRoomId();		player = new Player(100, "PlayerName", currentRoom.getRoomId(), currentRoom.getRoomId(), new String[]{"Fists", "Needle"});		parser = new Parser(System.in);		outside = new Room("outside the ruined Hospital", 0);		laboratory = new Room("laboratory, a room where research is done to patients",1);		patient_room = new Room("patient room... it gives you chills",2);		balcony = new Room("the balcony. you can see the city in rumbles",3);		operation_room = new Room("Last room in this floor... ",4);		outside.setExits(null, laboratory, balcony, patient_room);		laboratory.setExits(null, null, null, outside);		patient_room.setExits(null, outside, null, null);		balcony.setExits(outside, operation_room, null, null);		operation_room.setExits(null, null, null, balcony);		currentRoom = outside; // start game outside		// define items:		needle = new Item("Needle", "description", 5, 3, 2,null, 4 );		fire_extinguisher = new Item("Fire extinguisher", "description",10,5,10,null,0);		cable  = new Item("Cable", "description", 8,10,2,null,0);		metal_bar = new Item("Metal bar", "desc", 15, 20, 7,null,0);		crowbar = new Item("Crowbar", "desc", 20,20,8,null,0);		pillow = new Item("Pillow!", "desc", 0.1,20,3,null ,5);		fist = new Item("Fists", "desc",1,99999999,0,null,0);		// define enemies:		//RMV zombie = new Enemy("Zombie" );		// define starting inventory:	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);		}		else if (commandWord.equals("inv")){			printInventory();		}else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at the abandoned Hospital, Colorado.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());		System.out.println("Good luck, soldier");	}	private void printInventory() {		// Access the inventory through the player instance		String[] playerInventory = player.getInventory();		if (playerInventory != null && playerInventory.length > 0) {			System.out.println("You look through your inventory.");			System.out.println("Inside you have:");			for (String item : playerInventory) {				System.out.println(item);			}		} else {			System.out.println("Your inventory is empty.");		}	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();			// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);			if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				if (currentRoom.shortDescription() == "outside G block on Peninsula campus"){					System.out.println("Das Fenster ist offen, brrrrrrr");				}				System.out.println(currentRoom.longDescription());			}		}	}}